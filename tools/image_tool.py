# # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# # SPDX-License-Identifier: Apache-2.0
# """
# Shows how to generate and save an image with Stability Diffusion XL 1.0
# on Amazon Bedrock.
# """
# import base64
# import io
# import json
# import logging
# import os
# import boto3
# from PIL import Image
# from dotenv import load_dotenv
# from botocore.exceptions import ClientError

# # --- Load Environment Variables ---
# # Best practice for managing credentials.
# # Ensures AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN are loaded.
# load_dotenv()


# class ImageError(Exception):
#     """Custom exception for errors returned by SDXL."""
#     def __init__(self, message):
#         self.message = message


# # Configure logger
# logger = logging.getLogger(__name__)
# logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


# def generate_image(model_id: str, body: str) -> bytes:
#     """
#     Generates an image using a Stability AI model on Amazon Bedrock.

#     Args:
#         model_id (str): The model ID to use for image generation.
#         body (str): The JSON-formatted request body.

#     Returns:
#         bytes: The image generated by the model.

#     Raises:
#         ImageError: If the model returns an error or content filter warning.
#         ClientError: If there is an issue with the Boto3 client.
#     """
#     logger.info("Generating image with model %s...", model_id)

#     # Initialize the Bedrock runtime client
#     bedrock = boto3.client(service_name='bedrock-runtime')

#     # Define request headers
#     accept = "application/json"
#     content_type = "application/json"

#     # Invoke the model
#     response = bedrock.invoke_model(
#         body=body, modelId=model_id, accept=accept, contentType=content_type
#     )

#     # Parse the response
#     response_body = json.loads(response.get("body").read())
    
#     # Check for success
#     if response_body['result'] != 'success':
#         raise ImageError("Image generation failed with non-success result.")

#     # Decode the base64 image data
#     base64_image = response_body.get("artifacts")[0].get("base64")
#     base64_bytes = base64_image.encode('ascii')
#     image_bytes = base64.b64decode(base64_bytes)

#     # Check for generation errors
#     finish_reason = response_body.get("artifacts")[0].get("finishReason")
#     if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
#         raise ImageError(f"Image generation error. Finish reason: {finish_reason}")

#     logger.info("Successfully generated image with model %s", model_id)
#     return image_bytes


# def main():
#     """
#     Main function to demonstrate SDXL image generation and saving.
#     """
#     try:
#         # --- Configuration ---
#         model_id = 'stability.stable-diffusion-xl-v1'
#         prompt = "A cinematic, photographic shot of a misty Sri Lankan tea plantation at sunrise, with vibrant green terraces."
#         output_image_path = "output_image.png"

#         # Construct the request body with parameters
#         body = json.dumps({
#             "text_prompts": [{"text": prompt}],
#             "cfg_scale": 10,
#             "seed": 2048,
#             "steps": 50,
#             "samples": 1,
#             "style_preset": "photographic"  # Other options: "fantasy", "cinematic", "digital-art", etc.
#         })

#         # Generate the image
#         image_bytes = generate_image(model_id=model_id, body=body)

#         # Create a PIL Image object from the bytes
#         image = Image.open(io.BytesIO(image_bytes))

#         # Save the image to a file
#         logger.info("Saving generated image to %s", output_image_path)
#         image.save(output_image_path)

#         # Optionally, display the image if in a desktop environment
#         # image.show()

#     except ClientError as err:
#         message = err.response["Error"]["Message"]
#         logger.error("A client error occurred: %s", message)
#     except ImageError as err:
#         logger.error("An image generation error occurred: %s", err.message)
#     except Exception as e:
#         logger.error("An unexpected error occurred: %s", e)
#     else:
#         print(f"Finished successfully. Image saved to {output_image_path}.")


# if __name__ == "__main__":
#     main()
